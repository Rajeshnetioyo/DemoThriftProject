/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.example.demo.thrift.gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-08-08")
public class UniversityThrift implements org.apache.thrift.TBase<UniversityThrift, UniversityThrift._Fields>, java.io.Serializable, Cloneable, Comparable<UniversityThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UniversityThrift");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField UNIV_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("univ_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COURSES_FIELD_DESC = new org.apache.thrift.protocol.TField("courses", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UniversityThriftStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UniversityThriftTupleSchemeFactory();

  private java.lang.String id; // required
  private java.lang.String univ_name; // required
  private java.util.List<CourseThrift> courses; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    UNIV_NAME((short)2, "univ_name"),
    COURSES((short)3, "courses");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // UNIV_NAME
          return UNIV_NAME;
        case 3: // COURSES
          return COURSES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNIV_NAME, new org.apache.thrift.meta_data.FieldMetaData("univ_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COURSES, new org.apache.thrift.meta_data.FieldMetaData("courses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "course"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UniversityThrift.class, metaDataMap);
  }

  public UniversityThrift() {
  }

  public UniversityThrift(
    java.lang.String id,
    java.lang.String univ_name,
    java.util.List<CourseThrift> courses)
  {
    this();
    this.id = id;
    this.univ_name = univ_name;
    this.courses = courses;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UniversityThrift(UniversityThrift other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetUniv_name()) {
      this.univ_name = other.univ_name;
    }
    if (other.isSetCourses()) {
      java.util.List<CourseThrift> __this__courses = new java.util.ArrayList<CourseThrift>(other.courses.size());
      for (CourseThrift other_element : other.courses) {
        __this__courses.add(other_element);
      }
      this.courses = __this__courses;
    }
  }

  public UniversityThrift deepCopy() {
    return new UniversityThrift(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.univ_name = null;
    this.courses = null;
  }

  public java.lang.String getId() {
    return this.id;
  }

  public void setId(java.lang.String id) {
    this.id = id;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public java.lang.String getUniv_name() {
    return this.univ_name;
  }

  public void setUniv_name(java.lang.String univ_name) {
    this.univ_name = univ_name;
  }

  public void unsetUniv_name() {
    this.univ_name = null;
  }

  /** Returns true if field univ_name is set (has been assigned a value) and false otherwise */
  public boolean isSetUniv_name() {
    return this.univ_name != null;
  }

  public void setUniv_nameIsSet(boolean value) {
    if (!value) {
      this.univ_name = null;
    }
  }

  public int getCoursesSize() {
    return (this.courses == null) ? 0 : this.courses.size();
  }

  public java.util.Iterator<CourseThrift> getCoursesIterator() {
    return (this.courses == null) ? null : this.courses.iterator();
  }

  public void addToCourses(CourseThrift elem) {
    if (this.courses == null) {
      this.courses = new java.util.ArrayList<CourseThrift>();
    }
    this.courses.add(elem);
  }

  public java.util.List<CourseThrift> getCourses() {
    return this.courses;
  }

  public void setCourses(java.util.List<CourseThrift> courses) {
    this.courses = courses;
  }

  public void unsetCourses() {
    this.courses = null;
  }

  /** Returns true if field courses is set (has been assigned a value) and false otherwise */
  public boolean isSetCourses() {
    return this.courses != null;
  }

  public void setCoursesIsSet(boolean value) {
    if (!value) {
      this.courses = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case UNIV_NAME:
      if (value == null) {
        unsetUniv_name();
      } else {
        setUniv_name((java.lang.String)value);
      }
      break;

    case COURSES:
      if (value == null) {
        unsetCourses();
      } else {
        setCourses((java.util.List<CourseThrift>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case UNIV_NAME:
      return getUniv_name();

    case COURSES:
      return getCourses();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case UNIV_NAME:
      return isSetUniv_name();
    case COURSES:
      return isSetCourses();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof UniversityThrift)
      return this.equals((UniversityThrift)that);
    return false;
  }

  public boolean equals(UniversityThrift that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_univ_name = true && this.isSetUniv_name();
    boolean that_present_univ_name = true && that.isSetUniv_name();
    if (this_present_univ_name || that_present_univ_name) {
      if (!(this_present_univ_name && that_present_univ_name))
        return false;
      if (!this.univ_name.equals(that.univ_name))
        return false;
    }

    boolean this_present_courses = true && this.isSetCourses();
    boolean that_present_courses = true && that.isSetCourses();
    if (this_present_courses || that_present_courses) {
      if (!(this_present_courses && that_present_courses))
        return false;
      if (!this.courses.equals(that.courses))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetUniv_name()) ? 131071 : 524287);
    if (isSetUniv_name())
      hashCode = hashCode * 8191 + univ_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetCourses()) ? 131071 : 524287);
    if (isSetCourses())
      hashCode = hashCode * 8191 + courses.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(UniversityThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUniv_name()).compareTo(other.isSetUniv_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUniv_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.univ_name, other.univ_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCourses()).compareTo(other.isSetCourses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courses, other.courses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UniversityThrift(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("univ_name:");
    if (this.univ_name == null) {
      sb.append("null");
    } else {
      sb.append(this.univ_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("courses:");
    if (this.courses == null) {
      sb.append("null");
    } else {
      sb.append(this.courses);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UniversityThriftStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UniversityThriftStandardScheme getScheme() {
      return new UniversityThriftStandardScheme();
    }
  }

  private static class UniversityThriftStandardScheme extends org.apache.thrift.scheme.StandardScheme<UniversityThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UniversityThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UNIV_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.univ_name = iprot.readString();
              struct.setUniv_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COURSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.courses = new java.util.ArrayList<CourseThrift>(_list0.size);
                CourseThrift _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new CourseThrift();
                  _elem1.read(iprot);
                  struct.courses.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setCoursesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UniversityThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.univ_name != null) {
        oprot.writeFieldBegin(UNIV_NAME_FIELD_DESC);
        oprot.writeString(struct.univ_name);
        oprot.writeFieldEnd();
      }
      if (struct.courses != null) {
        oprot.writeFieldBegin(COURSES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.courses.size()));
          for (CourseThrift _iter3 : struct.courses)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UniversityThriftTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UniversityThriftTupleScheme getScheme() {
      return new UniversityThriftTupleScheme();
    }
  }

  private static class UniversityThriftTupleScheme extends org.apache.thrift.scheme.TupleScheme<UniversityThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UniversityThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUniv_name()) {
        optionals.set(1);
      }
      if (struct.isSetCourses()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetUniv_name()) {
        oprot.writeString(struct.univ_name);
      }
      if (struct.isSetCourses()) {
        {
          oprot.writeI32(struct.courses.size());
          for (CourseThrift _iter4 : struct.courses)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UniversityThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.univ_name = iprot.readString();
        struct.setUniv_nameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.courses = new java.util.ArrayList<CourseThrift>(_list5.size);
          CourseThrift _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new CourseThrift();
            _elem6.read(iprot);
            struct.courses.add(_elem6);
          }
        }
        struct.setCoursesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

